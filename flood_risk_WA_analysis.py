import arcpy
import os
from collections import defaultdict
'''Download fiona wheel from https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona in C:\Python27\ArcGISx6410.6\Scripts
Then in terminal, 'cd C:\Python27\ArcGISx6410.6\Scripts' and run 'pip install Fiona-1.7.13-cp27-cp27m-win_amd64.whl'
If get ImportError: DLL load failed during import, try updating GDAL module with https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona'''
import geopandas as gpd
import re

arcpy.CheckOutExtension("Spatial")
arcpy.env.overwriteOutput = True
arcpy.env.qualifiedFieldNames = False

#Folder structure
rootdir = 'C:/Mathis/ICSL/flood_vulnerability'
datadir = os.path.join(rootdir, 'data')
resdir = os.path.join(rootdir, 'results')
gdb_vulne = os.path.join(resdir,'flood_vulnerability.gdb')

gdb = os.path.join(resdir,'flood_risk.gdb')
if arcpy.Exists(gdb):
    print('Geodatabase already exists')
else:
    arcpy.CreateFileGDB_management(resdir, 'flood_risk.gdb')
arcpy.env.workspace = gdb


FEMAdraftgdb = os.path.join(datadir, 'FEMA_preliminary20181017/FEMApreliminary.gdb')
if arcpy.Exists(FEMAdraftgdb):
    print('FEMA geodatabase already exists')
else:
    arcpy.CreateFileGDB_management(os.path.join(datadir, 'FEMA_preliminary20181017'), 'FEMApreliminary.gdb')

#Input data variables
FEMAdata = os.path.join(datadir, 'FEMA_20180819/NFHL_53_20180620/NFHL_53_20180620.gdb') #FEMA geodatabase
FEMAfloodhaz =  os.path.join(FEMAdata, 'S_Fld_Haz_Ar') #FEMA hazard data
snohopk = os.path.join(datadir, 'SnohomishFloodModel2018_WebMerc20180815.mpk')
buildings_raw = os.path.join(datadir, r'MicrosoftFootprints_20181012/Washington/Washington.geojson')
USadmin = 'C:\Mathis\ICSL\stormwater\data\USA_adm_gdb\USA_adm.gdb'
USstates = os.path.join(USadmin, 'USA_adm1')
counties = os.path.join(datadir,"WA_County_Boundaries\WA_County_Boundaries.shp")
tracts2010 = os.path.join(datadir, 'TIGER2017\\Profile-County_Tract\Profile-County_Tract.gdb\\Tract_2010Census_DP1')
censusblock2010 = os.path.join(datadir, 'TIGER2017\\tabblock2010_53_pophu\\tabblock2010_53_pophu.shp')
racepred = os.path.join(resdir,'racepred\\parcels_blocksfill_racepred.csv')

parcels_blocksfill = 'parcel_blocks_fill'

#Output variables
FEMAprelim = 'S_Fld_Haz_Ar_prelim'
FEMAmerge = 'S_Fld_Haz_Ar_merge'
FEMAproj = 'S_Fld_Haz_Ar_proj'
FEMA_SFHA = 'FEMAfloodhaz_SFHA'
fathomsnoho = os.path.join(datadir, 'fathomsnoho\\v106\snohomishfloodmodel2018_fgdb.gdb')
floodhaz_1980 = os.path.join(fathomsnoho, 'Snoh_100_yr_1980s_Historical_binFT')
floodhaz_2050_low50 = os.path.join(fathomsnoho, 'Snoh_100_yr_2050s_RCP_4_5_Low_50th_binFT')
floodhaz_2050_high50 = os.path.join(fathomsnoho, 'Snoh_100_yr_2050s_RCP_8_5_High_50th_binFT')
flood80_parcel = 'floodhax1980_parcel_inters'
parcels_blocksfill_diss = 'parcel_blocks_fill_diss'
parcels_blocksfill_proj = 'parcel_blocks_fill_proj'
bg_proj = 'blockgroup2010_proj'
tracts_proj = 'tracts_WAproj'
floodbool = 'Snoh_100_yr_1980_bool'
parcels_flood_tab = 'parcel_blocks_fill_snohfloodcounttab'
parcels_flood = 'parcel_blocks_fill_snohflood'
parcels_FEMAdiss = 'parcels_FEMAdiss_intersdiss'
parcels_FEMAflood = 'parcels_FEMAflood_intersdiss'
buildings = os.path.join(resdir, 'buildings.shp')
buildingsproj = 'buildings_proj'
buildings_snoho = 'buildings_snoho'

#Projection (same as WA parcel database): NAD 1983 StatePlane Washington South FIPS 4602 Feet
cs = arcpy.SpatialReference(102749)

#-----------------------------------------------------------------------------------------------------------------------
# FORMAT FEMA DATA
#-----------------------------------------------------------------------------------------------------------------------
#Merge preliminary FEMA data - can't automatically merge because the feature classes have fields of differing length
regx_shp = '.*S_FLD_HAZ_AR.shp$'
FEMAprelimlist = []
for root, dirs, files in os.walk(os.path.join(datadir, 'FEMA_preliminary20181017')):
    for st in files:
        if re.search(regx_shp, st, re.IGNORECASE):
            inpath = os.path.join(root, st)
            outpath = os.path.join(FEMAdraftgdb, os.path.split(root)[1].split()[0])
            print(outpath)
            if not (arcpy.Exists(outpath)):
                arcpy.CopyFeatures_management(inpath, outpath)
            FEMAprelimlist.append(outpath)

maxlenFLZONE = max([[f.length for f in arcpy.ListFields(fc) if f.name == 'FLD_ZONE'] for fc in FEMAprelimlist])[0]
for fc in FEMAprelimlist:
    if 'FLD_ZONE' in [f.name for f in arcpy.ListFields(fc)]:
        print(fc)
        arcpy.AddField_management(fc, 'FLD_ZONEedit', "TEXT", field_length= maxlenFLZONE)
        arcpy.CalculateField_management(fc, 'FLD_ZONEedit', "!FLD_ZONE!", expression_type='PYTHON')
        arcpy.DeleteField_management(fc, 'FLD_ZONE')

arcpy.AddField_management(FEMAfloodhaz, 'FLD_ZONEedit', "TEXT", field_length= maxlenFLZONE)
arcpy.CalculateField_management(FEMAfloodhaz, 'FLD_ZONEedit', "!FLD_ZONE!", expression_type='PYTHON')
arcpy.DeleteField_management(FEMAfloodhaz, 'FLD_ZONE')
arcpy.DeleteField_management(FEMAfloodhaz, 'SOURCE_CIT')

arcpy.Merge_management(inputs=FEMAprelimlist, output=FEMAprelim)
arcpy.Merge_management(inputs=[FEMAprelim, FEMAfloodhaz], output=FEMAmerge)
arcpy.AlterField_management(FEMAmerge, 'FLD_ZONEedit', 'FLD_ZONE', 'FLD_ZONE')

#-----------------------------------------------------------------------------------------------------------------------
# INTERSECT FLOOD PARCELS WITH FLOOD HAZARD
#-----------------------------------------------------------------------------------------------------------------------
#Extract snohomish flood hazard data from map package
if not arcpy.Exists(fathomsnoho):
    print('Create new directory: '+ fathomsnoho)
    os.mkdir(fathomsnoho)
    arcpy.ExtractPackage_management(snohopk, fathomsnoho)

#Dissolve parcel data prior to intersection with flood hazard data
arcpy.Dissolve_management(parcels_blocksfill, parcels_blocksfill_diss, dissolve_field= 'PolyID', multi_part= 'MULTI_PART')
#Project parcel data to same cs as flood hazard data
flood_cs = arcpy.Describe(floodhaz_1980).SpatialReference
arcpy.Project_management(parcels_blocksfill_diss, parcels_blocksfill_proj, flood_cs)
arcpy.AddGeometryAttributes_management(parcels_blocksfill_proj, 'AREA_GEODESIC', Area_Unit='SQUARE_KILOMETERS')
arcpy.AlterField_management(parcels_blocksfill_proj, 'POLYAREA', 'PARCELAREA', 'PARCELAREA')

#------- Intersect with FATHOM model flood data -------------------------------------------------------
#Subset raster to exclude 999 ++(permanent water features)
floodsa = arcpy.sa.Con(((arcpy.sa.Raster(floodhaz_1980)>0) & (arcpy.sa.Raster(floodhaz_1980)<999)), 1, 0)
floodsa.save(os.path.join(gdb, floodbool)) #Crashes with exit code -1073741819 (0xC0000005)so perform in ArcMap

#Zonal statistics
arcpy.env.extent = floodbool
arcpy.env.snap = floodbool
arcpy.PolygonToRaster_conversion(parcels_blocksfill_proj, 'PolyID', parcels_blocksfill_proj + 'ras', 'MAXIMUM_AREA',
                                 cellsize = floodbool)
arcpy.sa.ZonalStatisticsAsTable(parcels_blocksfill_proj + 'ras', 'PolyID', floodbool, parcels_flood_tab, statistics_type='SUM')
#Join zonal statistics result and compute area intersecting with flood layer and area within 1/100 year flood zone
arcpy.MakeFeatureLayer_management(parcels_blocksfill_proj, 'pbplyr')
arcpy.AddJoin_management('pbplyr', 'PolyID', parcels_flood_tab, 'PolyID', join_type = 'KEEP_COMMON') #PolyID in 4th parameter likely not to work
arcpy.CopyFeatures_management('pbplyr', parcels_flood)
#Compute percentage area at risk of flood
arcpy.AddField_management(parcels_flood, 'snohoperarea', 'FLOAT')
arcpy.CalculateField_management(parcels_flood, 'snohoperarea', expression = '!SUM!/!COUNT!',
                                expression_type = 'PYTHON')

#------- Intersect with FEMA flood data -------------------------------------------------------
#Project FEMA
arcpy.Project_management(FEMAmerge, FEMAproj, out_coor_system=flood_cs)
#Dissolve flood hazard data to get footprint
arcpy.Dissolve_management(FEMAproj, 'FEMAfloodhaz_diss',multi_part='SINGLE_PART')

#Create separate layer only with Special Flood Hazard Area (100-year flood zone)
#From https://www.fema.gov/flood-zones (do not include coastal flooding 'V', 'VE', ['V'+str(n) for n in range(1,31)]
#all_codes = set([r[0] for r in arcpy.da.SearchCursor(floodhazproj, ['FLD_ZONE'])])
SFHA_codes = ['A', 'AO','AH', 'AE', 'A99', 'AR', 'AR/AE', 'AR/AO', 'AR/A1-A30', 'AR/A']+['A'+str(n) for n in range(1,31)]
SQLsel = "{0} IN ('{1}')".format('"FLD_ZONE"',"', '".join(map(str, SFHA_codes)) or 'NULL')
arcpy.MakeFeatureLayer_management(FEMAproj, 'FEMAfloodhaz_lyr')
arcpy.SelectLayerByAttribute_management('FEMAfloodhaz_lyr', 'NEW_SELECTION',  SQLsel)
arcpy.CopyFeatures_management('FEMAfloodhaz_lyr', FEMA_SFHA)
#Create separate layer only with SFHA from detailed studies
arcpy.SelectLayerByAttribute_management('FEMAfloodhaz_lyr', 'SUBSET_SELECTION', "NOT FLD_ZONE='A'")
arcpy.CopyFeatures_management('FEMAfloodhaz_lyr', 'FEMAfloodhaz_SFHA_detailed')

#Assess percentage of washington state with FEMA data
arcpy.MakeFeatureLayer_management(USstates, 'WAborder', "{}='Washington'".format('"NAME_1"'))
arcpy.CopyFeatures_management('WAborder', 'WA')
arcpy.Project_management('WA', 'WA_proj', out_coor_system=cs)
arcpy.AddGeometryAttributes_management('WA_proj', 'AREA', Area_Unit='SQUARE_METERS')
arcpy.AlterField_management('WA_proj', 'POLY_AREA', 'WA_AREA', 'WA_AREA')
arcpy.Intersect_analysis(['WA_proj',FEMAproj], 'WAFEMAflood_inters')
arcpy.AddGeometryAttributes_management('WAFEMAflood_inters', 'AREA', Area_Unit='SQUARE_METERS')
sum([row[0]/((10**6)*row[1]) for row in arcpy.da.SearchCursor('WAFEMAflood_inters', ['POLY_AREA','WA_AREA'])]) #FEMA flood hazard layers cover 34% of WA

#Intersect parcels with dissolved FEMA assessments to know which ones have been assessed for flood risk
arcpy.Intersect_analysis([parcels_flood, 'FEMAfloodhaz_diss'], out_feature_class='parcels_FEMAdiss_inters')
arcpy.Dissolve_management('parcels_FEMAdiss_inters', parcels_FEMAdiss, dissolve_field= 'PolyID', multi_part= 'MULTI_PART')
arcpy.AddField_management(parcels_FEMAdiss, 'FEMAperarea', 'FLOAT')
arcpy.CalculateField_management(parcels_FEMAdiss, 'FEMAperarea', expression = '!Shape_Area!/!PARCELAREA!',
                                expression_type = 'PYTHON')

#Intersect parcels with FEMA flood hazard
arcpy.Intersect_analysis([parcels_flood, 'FEMAfloodhaz_SFHA'], out_feature_class='parcels_FEMAflood_inters')
arcpy.Dissolve_management('parcels_FEMAflood_inters', parcels_FEMAflood, dissolve_field= 'PolyID', multi_part= 'MULTI_PART')
arcpy.AddField_management(parcels_FEMAflood, 'FEMAfloodperarea', 'FLOAT')
arcpy.CalculateField_management(parcels_FEMAflood, 'FEMAfloodperarea', expression = '!Shape_Area!/!PARCELAREA!',
                                expression_type = 'PYTHON')

#-----------------------------------------------------------------------------------------------------------------------
# SPATIALLY JOIN PARCELS, BUILDING FOOTPRINTS, AND FLOOD HAZARD
#-----------------------------------------------------------------------------------------------------------------------
#Based on building footprint intersection with flood zone
#Convert building footprints geojson to shapefile
buildingsdf = gpd.read_file(buildings_raw)
buildingsdf.to_file(buildings)
#Project buildings data
arcpy.Project_management(buildings, buildingsproj, flood_cs)
#Project tracts
arcpy.MakeFeatureLayer_management(tracts2010, 'tractslyr', "GEOID10 LIKE '53%'")
arcpy.CopyFeatures_management('tractslyr', 'tracts_WA')
arcpy.Project_management('tracts_WA', tracts_proj, flood_cs)

#TEST SCRIPT FOR SNOHOMISH
#Run test script on snohomish
arcpy.MakeFeatureLayer_management(buildingsproj, 'buildlyr')
arcpy.MakeFeatureLayer_management(counties, 'snohomishlyr', "JURISDIC_2 = 'Snohomish'")
arcpy.SelectLayerByLocation_management('buildlyr', 'INTERSECT', 'snohomishlyr', selection_type='NEW_SELECTION')
arcpy.CopyFeatures_management('buildlyr', buildings_snoho)
arcpy.MakeFeatureLayer_management(parcels_blocksfill_proj, 'snohoparcellyr')
arcpy.SelectLayerByLocation_management('snohoparcellyr', 'INTERSECT', 'snohomishlyr', selection_type='NEW_SELECTION')
arcpy.CopyFeatures_management('snohoparcellyr', parcels_blocksfill_proj + '_snoho')

#Run spatial join between building footprints and parcels
arcpy.SpatialJoin_analysis(buildings_snoho, parcels_blocksfill_proj + '_snoho', 'buildings_snoho_parceljoin',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option='HAVE_THEIR_CENTER_IN')
#Convert flood hazard boolean raster to polygon
arcpy.RasterToPolygon_conversion(floodbool, floodbool+'poly', simplify= 'NO_SIMPLIFY')
arcpy.MakeFeatureLayer_management(floodbool+'poly', 'floodpolylyr', "gridcode=0")
arcpy.DeleteFeatures_management('floodpolylyr')
#Run spatial join between building footprints and FATHOM flood hazard
arcpy.SpatialJoin_analysis('buildings_snoho_parceljoin', floodbool+'poly', 'buildings_snoho_parcelflood',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option= 'INTERSECT')

#Run spatial join between building footprints and FEMA flood hazard
arcpy.SpatialJoin_analysis('buildings_snoho_parceljoin', 'FEMAfloodhaz_SFHA', 'buildings_snoho_parcelFEMA',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option= 'INTERSECT')

#Make dictionary with number of buildings and flooding status for each parcel
buildflooddic = defaultdict(lambda: [0]*2)
for row in arcpy.da.SearchCursor('buildings_snoho_parcelflood', ['PolyID', 'gridcode']):
    buildflooddic[row[0]][0] += 1
    if row[1] == 1:
        buildflooddic[row[0]][1] += 1

#-----------------------------------------------------------------------------------------------------------------------
# JOIN PARCELS, BUILDINGS, AND ATTRIBUTES ALTOGETHER
#-----------------------------------------------------------------------------------------------------------------------
#Add building number and flooded status to parcels and determine whether parcel is considered flooded
arcpy.AddField_management(parcels_flood, 'BuildNum', 'SHORT')
arcpy.AddField_management(parcels_flood, 'BuildFld', 'SHORT')
arcpy.AddField_management(parcels_flood, 'FloodStatus', 'FLOAT')
with arcpy.da.UpdateCursor(parcels_flood, ['PolyID', 'BuildNum', 'BuildFld', 'snohoperarea', 'FloodStatus']) as cursor:
    for row in cursor:
        if row[0] in buildflooddic: #If parcel in building dictionary
            print(row[0])
            row[1] = buildflooddic[row[0]][0]
            row[2] = buildflooddic[row[0]][1]
            if buildflooddic[row[0]][1] > 0: #If a building is considered flooded, consider the parcel flooded
                row[4] = 1
            else:
                row[4] = 0
        else:
            row[1] = 0
            row[2] = 0
            if row[3] > 0: #If parcel does not have any building on it but intersects flood zone, consider it floodded
                row[4] = 1
            else:
                row[4] = 0

        if row[0][0:3] == '999': #If polygon is census block
            row[4] = row[3]
        cursor.updateRow(row)

#Join parcels' population and race characteristics to parcel polygons
arcpy.CopyRows_management(racepred, 'parcels_blocksfill_racepred')
arcpy.MakeFeatureLayer_management(parcels_flood, 'parcels_flood_lyr')
arcpy.AddJoin_management('parcels_flood_lyr', 'PolyID', 'parcels_blocksfill_racepred', 'PolyID', 'KEEP_ALL')
arcpy.CopyFeatures_management('parcels_flood_lyr', parcels_flood + '_attri')

#-----------------------------------------------------------------------------------------------------------------------
# COMPUTE FLOOD RISK WITH CENSUS BLOCKS AND IMPERVIOUS AREA
#-----------------------------------------------------------------------------------------------------------------------

import arcpy
from arcpy.sa import *
import os
import sys
from collections import defaultdict
'''Download fiona wheel from https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona in C:\Python27\ArcGISx6410.6\Scripts
Then in terminal, 'cd C:\Python27\ArcGISx6410.6\Scripts' and run 'pip install Fiona-1.7.13-cp27-cp27m-win_amd64.whl'
If get ImportError: DLL load failed during import, try updating GDAL module with https://www.lfd.uci.edu/~gohlke/pythonlibs/#fiona'''
import geopandas as gpd
import re
import time

arcpy.CheckOutExtension("Spatial")
arcpy.env.overwriteOutput = True
arcpy.env.qualifiedFieldNames = False

#Folder structure
rootdir = 'C:/Mathis/ICSL/flood_vulnerability'
datadir = os.path.join(rootdir, 'data')
resdir = os.path.join(rootdir, 'results')
execfile(os.path.join(rootdir, 'src\\Python37\\floodvulne35\\floodvulne35\\panda_to_csvforArcGIS.py')) #Shitty way to do it. Deal with it later
gdb_vulne = os.path.join(resdir,'flood_vulnerability.gdb')

gdb = os.path.join(resdir,'flood_risk.gdb')
if arcpy.Exists(gdb):
    print('Geodatabase already exists')
else:
    arcpy.CreateFileGDB_management(resdir, 'flood_risk.gdb')
arcpy.env.workspace = gdb


FEMAdraftgdb = os.path.join(datadir, 'FEMA_preliminary20181017/FEMApreliminary.gdb')
if arcpy.Exists(FEMAdraftgdb):
    print('FEMA geodatabase already exists')
else:
    arcpy.CreateFileGDB_management(os.path.join(datadir, 'FEMA_preliminary20181017'), 'FEMApreliminary.gdb')

#Input data variables
FEMAdata = os.path.join(datadir, 'FEMA_20180819/NFHL_53_20180620/NFHL_53_20180620.gdb') #FEMA geodatabase
FEMAfloodhaz =  os.path.join(FEMAdata, 'S_Fld_Haz_Ar') #FEMA hazard data
fathomflood = os.path.join(datadir, 'fathomWA\Washington\def1in100_45\\def1in100_45.TIF')
buildings_raw = os.path.join(datadir, r'MicrosoftFootprints_20181012/Washington/Washington.geojson')
USadmin = 'C:\Mathis\ICSL\stormwater\data\USA_adm_gdb\USA_adm.gdb'
USstates = os.path.join(USadmin, 'USA_adm1')
counties = os.path.join(datadir,"WA_County_Boundaries\WA_County_Boundaries.shp")
tracts2010 = os.path.join(datadir, 'TIGER2017\\Profile-County_Tract\Profile-County_Tract.gdb\\Tract_2010Census_DP1')
censusblock2010 = os.path.join(datadir, 'TIGER2017\\tabblock2010_53_pophu\\tabblock2010_53_pophu.shp')
racepred = os.path.join(resdir,'racepred\\parcels_blocksfill_racepred.csv')
NLCD = 'C:/Mathis/ICSL/stormwater/data/nlcd_2011_landcover_2011_edition_2014_10_10/nlcd_2011_landcover_2011_edition_2014_10_10.img'

parcels_blocksfill = 'parcel_blocks_fill'

#Output variables
FEMAprelim = 'S_Fld_Haz_Ar_prelim'
FEMAmerge = 'S_Fld_Haz_Ar_merge'
FEMAproj = 'S_Fld_Haz_Ar_proj'
FEMA_SFHA = 'FEMAfloodhaz_SFHA'
FEMA_SFHAdiss = FEMA_SFHA + 'diss'
parcels_blocksfill_diss = 'parcel_blocks_fill_diss'
parcels_blocksfill_proj = 'parcel_blocks_fill_proj'
bg_proj = 'blockgroup2010_proj'
tracts_proj = 'tracts_WAproj'
floodbool = 'def1in100_45_bool'
parcels_flood = 'parcel_blocks_fill_flood'
parcels_flooddiss = 'parcel_blocks_fill_flooddiss'
parcels_FEMAdiss = 'parcels_FEMAdiss_inters'
parcels_FEMAflood = 'parcels_FEMAflood_inters'
buildings = os.path.join(resdir, 'buildings.shp')
buildingsproj = 'buildings_proj'
blockproj = 'block2010_proj'
blockurban_sumtab = os.path.join(resdir, 'blockurban/blockurban_sum.csv')
blockurbanFEMAflood_sumtab = os.path.join(resdir, 'blockurbanFEMAflood/blockurbanFEMAflood_sum.csv')

flood_cs = arcpy.Describe(fathomflood).SpatialReference

#Projection (same as WA parcel database): NAD 1983 StatePlane Washington South FIPS 4602 Feet
cs = arcpy.SpatialReference(102749)

#-----------------------------------------------------------------------------------------------------------------------
# FORMAT FEMA DATA
#-----------------------------------------------------------------------------------------------------------------------
#Merge preliminary FEMA data - can't automatically merge because the feature classes have fields of differing length
regx_shp = '.*S_FLD_HAZ_AR.shp$'
FEMAprelimlist = []
for root, dirs, files in os.walk(os.path.join(datadir, 'FEMA_preliminary20181017')):
    for st in files:
        if re.search(regx_shp, st, re.IGNORECASE):
            inpath = os.path.join(root, st)
            outpath = os.path.join(FEMAdraftgdb, os.path.split(root)[1].split()[0])
            print(outpath)
            if not (arcpy.Exists(outpath)):
                arcpy.CopyFeatures_management(inpath, outpath)
            FEMAprelimlist.append(outpath)

maxlenFLZONE = max([[f.length for f in arcpy.ListFields(fc) if f.name == 'FLD_ZONE'] for fc in FEMAprelimlist])[0]
for fc in FEMAprelimlist:
    if 'FLD_ZONE' in [f.name for f in arcpy.ListFields(fc)]:
        print(fc)
        arcpy.AddField_management(fc, 'FLD_ZONEedit', "TEXT", field_length= maxlenFLZONE)
        arcpy.CalculateField_management(fc, 'FLD_ZONEedit', "!FLD_ZONE!", expression_type='PYTHON')
        arcpy.DeleteField_management(fc, 'FLD_ZONE')

arcpy.AddField_management(FEMAfloodhaz, 'FLD_ZONEedit', "TEXT", field_length= maxlenFLZONE)
arcpy.CalculateField_management(FEMAfloodhaz, 'FLD_ZONEedit', "!FLD_ZONE!", expression_type='PYTHON')
arcpy.DeleteField_management(FEMAfloodhaz, 'FLD_ZONE')
arcpy.DeleteField_management(FEMAfloodhaz, 'SOURCE_CIT')

arcpy.Merge_management(inputs=FEMAprelimlist, output=FEMAprelim)
arcpy.Merge_management(inputs=[FEMAprelim, FEMAfloodhaz], output=FEMAmerge)
arcpy.AlterField_management(FEMAmerge, 'FLD_ZONEedit', 'FLD_ZONE', 'FLD_ZONE')

#-----------------------------------------------------------------------------------------------------------------------
# INTERSECT FLOOD PARCELS WITH FLOOD HAZARD
#-----------------------------------------------------------------------------------------------------------------------
#------- Intersect with FATHOM model flood data -------------------------------------------------------
#Subset raster to exclude 999 ++(permanent water features)
floodsa = Con(((Raster(fathomflood)>0) & (Raster(fathomflood)<999)), 1)
floodsa.save(os.path.join(gdb, floodbool)) #Crashes with exit code -1073741819 (0xC0000005)so perform in ArcMap

#Convert flood hazard boolean raster to polygon
arcpy.RasterToPolygon_conversion(floodbool, floodbool+'poly', simplify= 'NO_SIMPLIFY')
arcpy.Project_management(floodbool+'poly', floodbool+'proj', cs)
#Intersect parcels and floodbool
arcpy.Identity_analysis(parcels_blocksfill, floodbool+'proj', parcels_flood)
arcpy.AddGeometryAttributes_management(parcels_flood, 'AREA', Area_Unit='SQUARE_METERS')
arcpy.AddField_management(parcels_flood, 'FLOOD_AREA', 'DOUBLE')
arcpy.CalculateField_management(parcels_flood, 'FLOOD_AREA', '!POLY_AREA!*!gridcode!', expression_type='PYTHON')
arcpy.Dissolve_management(parcels_flood, parcels_flooddiss, 'PolyID',
                          statistics_fields=[['FLOOD_AREA', 'SUM'],['PARCELAREA', 'FIRST']])
#Compute percentage area at risk of flood
arcpy.AddField_management(parcels_flooddiss, 'FLOOD_PERAREA', 'FLOAT')
arcpy.CalculateField_management(parcels_flooddiss, 'FLOOD_PERAREA', expression = '!SUM_FLOOD_AREA!/!FIRST_PARCELAREA!',
                                expression_type = 'PYTHON')

#------- Intersect with FEMA flood data -------------------------------------------------------
#Project FEMA
arcpy.Project_management(FEMAmerge, FEMAproj, out_coor_system=cs)
#Dissolve flood hazard data to get footprint
arcpy.Dissolve_management(FEMAproj, 'FEMAfloodhaz_diss',multi_part='SINGLE_PART')

#Create separate layer only with Special Flood Hazard Area (100-year flood zone)
#From https://www.fema.gov/flood-zones (do not include coastal flooding 'V', 'VE', ['V'+str(n) for n in range(1,31)]
#all_codes = set([r[0] for r in arcpy.da.SearchCursor(floodhazproj, ['FLD_ZONE'])])
SFHA_codes = ['A', 'AO','AH', 'AE', 'A99', 'AR', 'AR/AE', 'AR/AO', 'AR/A1-A30', 'AR/A']+['A'+str(n) for n in range(1,31)]
SQLsel = "{0} IN ('{1}')".format('"FLD_ZONE"',"', '".join(map(str, SFHA_codes)) or 'NULL')
arcpy.MakeFeatureLayer_management(FEMAproj, 'FEMAfloodhaz_lyr')
arcpy.SelectLayerByAttribute_management('FEMAfloodhaz_lyr', 'NEW_SELECTION',  SQLsel)
arcpy.CopyFeatures_management('FEMAfloodhaz_lyr', FEMA_SFHA)
arcpy.Dissolve_management(FEMA_SFHA, FEMA_SFHAdiss)
#Create separate layer only with SFHA from detailed studies
arcpy.SelectLayerByAttribute_management('FEMAfloodhaz_lyr', 'SUBSET_SELECTION', "NOT FLD_ZONE='A'")
arcpy.CopyFeatures_management('FEMAfloodhaz_lyr', 'FEMAfloodhaz_SFHA_detailed')

#Assess percentage of washington state with FEMA data
arcpy.MakeFeatureLayer_management(USstates, 'WAborder', "{}='Washington'".format('"NAME_1"'))
arcpy.CopyFeatures_management('WAborder', 'WA')
arcpy.Project_management('WA', 'WA_proj', out_coor_system=cs)
arcpy.AddGeometryAttributes_management('WA_proj', 'AREA', Area_Unit='SQUARE_METERS')
arcpy.AlterField_management('WA_proj', 'POLY_AREA', 'WA_AREA', 'WA_AREA')
arcpy.Intersect_analysis(['WA_proj',FEMAproj], 'WAFEMAflood_inters')
arcpy.AddGeometryAttributes_management('WAFEMAflood_inters', 'AREA', Area_Unit='SQUARE_METERS')
sum([row[0]/(row[1]) for row in arcpy.da.SearchCursor('WAFEMAflood_inters', ['POLY_AREA','WA_AREA'])]) #FEMA flood hazard layers cover 52.7% of WA

#Intersect parcels with dissolved FEMA assessments to know which ones have been assessed for flood risk
arcpy.Intersect_analysis([parcels_flooddiss, 'FEMAfloodhaz_diss'], out_feature_class=parcels_FEMAdiss)
arcpy.AddGeometryAttributes_management(parcels_FEMAdiss, 'AREA', Area_Unit='SQUARE_METERS')
#Intersect parcels with FEMA flood hazard
arcpy.Intersect_analysis([parcels_flooddiss, FEMA_SFHAdiss], out_feature_class=parcels_FEMAflood)
arcpy.AddGeometryAttributes_management(parcels_FEMAflood, 'AREA', Area_Unit='SQUARE_METERS')

#-----------------------------------------------------------------------------------------------------------------------
# SPATIALLY JOIN PARCELS, BUILDING FOOTPRINTS, AND FLOOD HAZARD
#-----------------------------------------------------------------------------------------------------------------------
#Based on building footprint intersection with flood zone
#Convert building footprints geojson to shapefile
buildingsdf = gpd.read_file(buildings_raw)
buildingsdf.to_file(buildings)
#Project buildings data
arcpy.Project_management(buildings, buildingsproj, cs)
#Project tracts
arcpy.MakeFeatureLayer_management(tracts2010, 'tractslyr', "GEOID10 LIKE '53%'")
arcpy.CopyFeatures_management('tractslyr', 'tracts_WA')
arcpy.Project_management('tracts_WA', tracts_proj, cs)

#Run spatial join between building footprints and parcels
arcpy.SpatialJoin_analysis(buildings, parcels_blocksfill_diss, 'buildings_parceljoin',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option='HAVE_THEIR_CENTER_IN')
#Run spatial join between building footprints and FATHOM flood hazard
arcpy.SpatialJoin_analysis('buildings_parceljoin', floodbool+'poly', 'buildings_parcelflood',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option= 'INTERSECT')
#Run spatial join between building footprints and FEMA flood hazard
arcpy.SpatialJoin_analysis('buildings_parceljoin', FEMA_SFHAdiss, 'buildings_parcelFEMA',
                           join_operation= 'JOIN_ONE_TO_ONE', join_type= 'KEEP_ALL', match_option= 'INTERSECT')

#Make dictionary with number of buildings and flooding status for each parcel
buildflooddic = defaultdict(lambda: [0]*2) #For fathom data
for row in arcpy.da.SearchCursor('buildings_parcelflood', ['PolyID', 'gridcode']):
    buildflooddic[row[0]][0] += 1
    if row[1] == 1:
        buildflooddic[row[0]][1] += 1

buildFEMAdic = defaultdict(lambda: [0]*2) #For FEMA data
for row in arcpy.da.SearchCursor('buildings_parcelFEMA', ['PolyID', 'Shape_Area_1']):
    buildFEMAdic[row[0]][0] += 1
    if row[1] is not None:
        buildFEMAdic[row[0]][1] += 1

#Make dictionary computing the percentage area of parcels flooded according to FEMA data
parcelFEMAdic = defaultdict(float)
for row in arcpy.da.SearchCursor(parcels_FEMAflood, ['PolyID', 'POLY_AREA','FIRST_PARCELAREA']):
    if row[2] is not None:
        parcelFEMAdic[row[0]] += row[1]/row[2]

#-----------------------------------------------------------------------------------------------------------------------
# JOIN PARCELS, BUILDINGS, AND ATTRIBUTES ALTOGETHER
#-----------------------------------------------------------------------------------------------------------------------
#Add building number and flooded status to parcels and determine whether parcel is considered flooded
arcpy.AddField_management(parcels_flooddiss, 'BuildNum', 'SHORT')
arcpy.AddField_management(parcels_flooddiss, 'BuildFld', 'SHORT')
arcpy.AddField_management(parcels_flooddiss, 'FloodStatus', 'FLOAT')
arcpy.AddField_management(parcels_flooddiss, 'BuildFEMAFld', 'SHORT')
arcpy.AddField_management(parcels_flooddiss, 'FEMAFLOODPERAREA', 'FLOAT')
arcpy.AddField_management(parcels_flooddiss, 'FEMAFloodStatus', 'FLOAT')

with arcpy.da.UpdateCursor(parcels_flooddiss, ['PolyID', 'BuildNum', 'BuildFld', 'BuildFEMAFld',
                                               'FLOOD_PERAREA', 'FloodStatus',
                                               'FEMAFLOODPERAREA','FEMAFloodStatus']) as cursor:
    for row in cursor:
        print(row[0])
        if row[0] in parcelFEMAdic:
            row[6] = parcelFEMAdic[row[0]]
        if row[0] in buildflooddic: #If parcel in building dictionary
            print(row[0])
            row[1] = buildflooddic[row[0]][0]
            row[2] = buildflooddic[row[0]][1]
            row[3] = buildFEMAdic[row[0]][1]
            if buildflooddic[row[0]][1] > 0: #If a building is considered flooded from Fathom model, consider the parcel flooded
                row[5] = 1
            else:
                row[5] = 0
            if buildFEMAdic[row[0]][1] > 0: #If a building is considered flooded from FEMA model, consider the parcel flooded
                row[7] = 1
            else:
                row[7] = 0
        else:
            row[1] = 0
            row[2] = 0
            row[3] = 0
            if row[4] > 0: #If parcel does not have any building on it but intersects Fathom flood zone, consider it floodded
                row[5] = 1
            else:
                row[5] = 0


            if parcelFEMAdic[row[0]] > 0: #If parcel does not have any building on it but intersects FEMA flood zone, consider it flooded
                row[7] = 1
            else:
                row[7] = 0

        if row[0][0:3] == '999': #If polygon is census block
            row[5] = max(1, row[4]) #Flood status is percentage area in flood zone (fathom data)
            row[7] = max(1, parcelFEMAdic[row[0]]) #FEMA data
        cursor.updateRow(row)

#Join parcels' population and race characteristics to parcel polygons
arcpy.CopyRows_management(racepred, 'parcels_blocksfill_racepred')
arcpy.MakeFeatureLayer_management(parcels_flooddiss, 'parcels_flood_lyr')
arcpy.AddJoin_management('parcels_flood_lyr', 'PolyID', 'parcels_blocksfill_racepred', 'PolyID', 'KEEP_ALL')
arcpy.CopyFeatures_management('parcels_flood_lyr', parcels_flood + '_attri')

#-----------------------------------------------------------------------------------------------------------------------
# COMPUTE FLOOD RISK WITH CENSUS BLOCKS AND IMPERVIOUS AREA
#-----------------------------------------------------------------------------------------------------------------------
#Reclassify land cover to urban-non urban
NLCD_reclass = 'NLCD_reclass'
arcpy.env.extent = floodbool
arcpy.env.snap = floodbool
arcpy.env.outputCoordinateSystem = floodbool
outCon1 = Con((Raster(NLCD)  >=  21)  & (Raster(NLCD)  <=  24), 1)
outCon1.save(NLCD_reclass)

#Convert NLCD reclass to polygons
arcpy.RasterToPolygon_conversion(NLCD_reclass, 'NLCDurban', simplify= 'NO_SIMPLIFY') #Takes < 10 minutes for WA
arcpy.Project_management('NLCDurban', 'NLCDurbanproj', cs)

#Intersect blocks with NLCD reclass polygons
arcpy.Project_management(censusblock2010, blockproj, cs)
arcpy.AddGeometryAttributes_management(blockproj, 'AREA_GEODESIC', Area_Unit='SQUARE_METERS')
arcpy.AlterField_management(blockproj, 'AREA_GEO', new_field_name='BLOCKAREA', new_field_alias='BLOCKAREA')
arcpy.Identity_analysis(blockproj, 'NLCDurban', 'blockurban')
arcpy.AddGeometryAttributes_management('blockurban', 'AREA_GEODESIC', Area_Unit='SQUARE_METERS')

#Intersect blocks with fathom flooding
arcpy.Identity_analysis('blockurban', floodbool+'proj', 'blockurbanflood')
arcpy.AlterField_management('blockurbanflood', 'gridcode_1', 'gridcode_flood', 'gridcode_flood')
arcpy.AddGeometryAttributes_management('blockurbanflood', 'AREA_GEODESIC', Area_Unit='SQUARE_METERS')
arcpy.AddField_management('blockurbanflood', 'URBANFLOODAREA', 'DOUBLE')
arcpy.CalculateField_management('blockurbanflood', 'URBANFLOODAREA', '!AREA_GEO!*!gridcode!*!gridcode_flood!', expression_type='PYTHON')

#Intersect blocks with FEMA flooding
arcpy.Identity_analysis('blockurban', FEMA_SFHAdiss, 'blockurbanFEMAflood')
arcpy.AddGeometryAttributes_management('blockurbanFEMAflood', 'AREA_GEODESIC', Area_Unit='SQUARE_METERS')

#Dissolve blocks
arcpy.Dissolve_management('blockurbanflood', 'blockurbanflood_diss', 'BLOCKID10',
                          statistics_fields=[['BLOCKAREA', 'FIRST'], ['URBANFLOODAREA', 'SUM']]) #Fathom flooding

#Join data
arcpy.AddField_management('blockurbanflood_diss', 'URBANAREA', 'DOUBLE')
urbandict = {}
with arcpy.da.SearchCursor('blockurban',['BLOCKID10','gridcode', 'AREA_GEO']) as cursor:
    for row in cursor:
        if row[2] is not None:
            if not row[0] in urbandict:
                urbandict[row[0]] = float(row[1])*row[2]
            elif row[2] is not None:
                urbandict[row[0]] +=  float(row[1])*row[2]
with arcpy.da.UpdateCursor('blockurbanflood_diss', ['BLOCKID10', 'URBANAREA']) as cursor:
    for row in cursor:
        if row[0] in urbandict:
            row[1] = urbandict[row[0]]
            cursor.updateRow(row)

#FEMA flood data
arcpy.AddField_management('blockurbanflood_diss', 'URBANFEMAFLOODAREA', 'DOUBLE')
arcpy.DeleteField_management('blockurbanflood_diss', 'URBANFLOODAREA')
FEMAflooddict = {}
with arcpy.da.SearchCursor('blockurbanFEMAflood',['BLOCKID10', 'gridcode', 'FLD_ZONE', 'AREA_GEO']) as cursor:
    for row in cursor:
        if row[1] == 1 and row[2] is not None and row[3] is not None:
            if not row[0] in FEMAflooddict:
                FEMAflooddict[row[0]] = row[3]
            else:
                FEMAflooddict[row[0]] +=  row[3]
with arcpy.da.UpdateCursor('blockurbanflood_diss', ['BLOCKID10', 'URBANFEMAFLOODAREA']) as cursor:
    for row in cursor:
        if row[0] in FEMAflooddict:
            row[1] = FEMAflooddict[row[0]]
            cursor.updateRow(row)
#Author: Mathis Messager
#Date created: 2018/09/20

#Download effective, preliminary, and pending FEMA flood hazard layers
#See https://hazards.fema.gov/femaportal/wps/portal/NFHLWMS for available FEMA GIS data
#See https://support.esri.com/en/technical-article/000013950 for info on spatial reference

import arcpy
from os import *
import itertools
import glob
arcpy.env.overwriteOutput = True

#Folder structure
rootdir = 'C:/Mathis/ICSL/flood_vulnerability'
datadir = path.join(rootdir, 'data')
resdir = path.join(rootdir, 'results')

FEMAdraftdir = path.join(datadir, 'FEMAdraft_20180920')
FEMAdraftgdb = path.join(FEMAdraftdir, 'FEMAdraft.gdb')
if not (path.exists(FEMAdraftdir)):
    print('Create new directory: {}'.format(FEMAdraftdir))
    mkdir(FEMAdraftdir)
if not arcpy.Exists(FEMAdraftgdb):
    print('Create FEMA geodatabase')
    arcpy.CreateFileGDB_management(FEMAdraftdir, 'FEMAdraft.gdb')

counties = path.join(datadir,"WA_County_Boundaries\WA_County_Boundaries.shp")

def APIdownload(URL, name, min=0, max=10000000, itersize=100, ingeom=None, proj=None, ):
    if ingeom is not None and proj is not None:
        print('Subsetting by input geometry!')
        arcpy.Project_management(ingeom, out_dataset='ingeom_proj', out_coor_system=arcpy.SpatialReference(proj))
        geomext = arcpy.Describe('ingeom_proj').extent
        #geomext_format = '{{xmin: {0}, ymin: {1}, xmax: {2}, ymax: {3}}}'.format(str(geomext.XMin), str(geomext.YMin),
        #                                                                         str(geomext.XMax), str(geomext.YMax))
        geomext_format = '{0},{1},{2},{3}'.format(str(geomext.XMin), str(geomext.YMin),str(geomext.XMax), str(geomext.YMax))
        arcpy.Delete_management('ingeom_proj')
    else:
        geomext_format = None

    IDrange = range(min,max, itersize)
    for i,j in itertools.izip(IDrange, IDrange[1:]):
        itertry = itersize
        downlist = []
        #It seems like FEMA REST API server also has a limitation on the size of the downloads so sometimes won't allow
        #to download even 50 features. Therefore, if fails to download, try smaller increments until reaches increments of 2
        #if still fails at increments of 2, then throw a proper error and break
        while True:
            try:
                IDrangetry = list(sorted(set(range(i,j+1, itertry)+[j]))) #To make sure that the list goes until the maximum
                #Loop with smaller increment within range
                for k,l in itertools.izip(IDrangetry, IDrangetry[1:]):
                    print('From {0} to {1}'.format(k, l))
                    where = "OBJECTID>={0} AND OBJECTID<{1}".format(k, l)
                    # &geometryType=esriGeometryPoint
                    query = "?where={0}&&text=&objectIds=&time=&geometry=&geometryType=esriGeometryPolygon&inSR={1}&\
                    spatialRel=esriSpatialRelIntersects&relationParam=&outFields=*&returnGeometry=true&returnTrueCurves=false&\
                    maxAllowableOffset=&geometryPrecision=&outSR=&returnIdsOnly=false&returnCountOnly=false&orderByFields=&\
                    groupByFieldsForStatistics=&outStatistics=&returnZ=false&returnM=false&gdbVersion=&returnDistinctValues=false&\
                    resultOffset=&resultRecordCount=&queryByDistance=&returnExtentsOnly=false&datumTransformation=&parameterValues=&\
                    rangeValues=&f=pjson".format(where, geomext_format)
                    fsURL = URL + query
                    fs = arcpy.FeatureSet()
                    fs.load(fsURL)
                    if long(arcpy.GetCount_management(fs)[0]) > 0:
                        outname = '{0}_{1}_{2}'.format(name, k, l)
                        downlist.append(outname)
                        arcpy.CopyFeatures_management(fs, outname)
                        print(outname)
                    else:
                        print('No data from OBJECTID {0} to OBJECTID {1}'.format(k, l))
                break
            except:
                if itertry>5:
                    print('Count not download, delete previous {0} datasets, try downloading in smaller increments'.format(len(downlist)))
                    if len(downlist) > 0:
                        for fc in downlist:
                            arcpy.Delete_management(fc)
                        downlist = []
                    itertry = itertry/2
                else:
                    e = sys.exc_info()[1]
                    print('Exit with error: '+e.args[0])
                    #sys.exit(1)
                    break

    arcpy.Merge_management(arcpy.ListFeatureClasses('{}_*'.format(name)),output='{}'.format(name))
    for fc in arcpy.ListFeatureClasses('{}_*'.format(name)):
        arcpy.Delete_management(fc)

APIdownload("https://hazards.fema.gov/gis/nfhl/rest/services/PrelimPending/Prelim_NFHL/MapServer/24/query",
            'S_Fld_Haz_Ar', min=38215, max=10000000, itersize=200)

